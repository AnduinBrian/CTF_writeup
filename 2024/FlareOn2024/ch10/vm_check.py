def ROL8(value, n):
   return ((value << n) | (value >> (8 - n))) & 0xff

def ROR8(value, n):
    return ((value >> n) | (value << (8 - n))) & 0xff

def ROL32(value, n):
    return (value << n) | (value >> (32 - n)) & 0xffffffff

def ROR32(value, n):
    return (value >> n) | (value >> (32 - n)) & 0xffffffff

def VM1():
    mem = [0 for x in range(0,33)]

    mem[0] = 0x6144
    mem[1] = 0x7543
    mem[2] = 0x6962
    mem[3] = 0x6c63
    mem[4] = 0x4c65
    mem[5] = 0x6669
    mem[6] = 0x3165
    mem[7] = 0x3130
    mem[0xa] = 0x6144
    mem[0xb] = 0x7534
    mem[0xc] = 0x6962
    mem[0xd] = 0x6C63
    mem[0xe] = 0x3165
    mem[0xf] = 0x6669
    mem[0x10] = 0x6265
    mem[0x11] = 0x6230

    mem[8] = mem[3] << 0x30 | mem[2] << 0x20 | mem[1] << 0x10 | mem[0]
    mem[9] = mem[7] << 0x30 | mem[6] << 0x20 | mem[5] << 0x10 | mem[4]
    mem[0x12] = mem[0xd] << 0x30 | mem[0xc] << 0x20 | mem[0xb] << 0x10 | mem[0xa]
    mem[0x13] = mem[0x11] << 0x30 |  mem[0x10] << 0x20 | mem[0xf] << 0x10 | mem[0xe]

    mem[0x14] = 0
    mem[0x18] = 1
    mem[0x17] = 0
    mem[0x19] = 0

    while(1):
        if mem[0x18] != 1:
            if mem[0x17] == 0x10:
                mem[0x19] = 1
                string = mem[9] << 64 | mem[8]
                test = string.to_bytes(16, "little")
                print("Password: %s" % test)
            break

        if mem[0x14] < 0x8:
            mem[0x15] = mem[0x8] >> (mem[0x14] * 8)
            mem[0x16] = mem[0x12] >> (mem[0x14] * 8)
        
        if mem[0x14] > 0x7:
            mem[0x15] = mem[9] >> ((mem[0x14] - 8) * 8)
            mem[0x16] = mem[0x13] >> ((mem[0x14] - 8) * 8)

        mem[0x15] &= 0xff
        mem[0x16] &= 0xff

        if mem[0x14] == 2:
            mem[0x16] = ROL8(mem[0x16], 0x4) 
                    
        if mem[0x14] == 9:
            mem[0x16] = ROR8(mem[0x16], 0x2)
        
        if mem[0x14] == 0xD:
            mem[0x16] = ROL8(mem[0x16], 7)
        
        if mem[0x14] == 0xF:
            mem[0x16] = ROL8(mem[0x16], 7)

        if mem[0x15] != mem[0x16]:
            print("fail")
            mem[0x18] = 0
        
        if mem[0x15] == mem[0x16]:
            mem[0x17] += 1

        mem[0x14] += 1
        if mem[0x14] > 0xF:
            mem[0x18] = 0

def VM2():
    mem = [0 for x in range(0,256)]

    mem[0] = 0x3347
    mem[1] = 0x4474
    mem[2] = 0x4a61
    mem[3] = 0x6230
    mem[4] = 0x3044
    mem[5] = 0x656e
    mem[6] = 0x344d
    mem[7] = 0x6574
    mem[0xa] = 0xA059
    mem[0xb] = 0x6A4D
    mem[0xc] = 0xDE23
    mem[0xd] = 0x24C0
    mem[0xe] = 0x64E2
    mem[0xf] = 0x59B1
    mem[0x10] = 0x7207
    mem[0x11] = 0x7F5C

    mem[8] = mem[3] << 0x30 | mem[2] << 0x20 | mem[1] << 0x10 | mem[0]
    mem[9] = mem[7] << 0x30 | mem[6] << 0x20 | mem[5] << 0x10 | mem[4]
    mem[0x12] = mem[0xd] << 0x30 | mem[0xc] << 0x20 | mem[0xb] << 0x10 | mem[0xa]
    mem[0x13] = mem[0x11] << 0x30 |  mem[0x10] << 0x20 | mem[0xf] << 0x10 | mem[0xe]

    mem[0x14] = 0
    mem[0x15] = 1
    mem[0x16] = 0
    mem[0x17] = 0

    mem[0x1c] = 0x43fd | 0x3 << 0x10
    mem[0x1d] = 0x9ec3 | 0x26 << 0x10
    mem[0x1b] = 0x1 << 0x1f
    mem[0x1e] = 0x1337

    while(1):
        if mem[0x15] != 1:
            if mem[0x16] == 0x10:
                mem[0x17] = 1
                string = mem[9] << 64 | mem[8]
                test = string.to_bytes(16, "little")
                print("Password: %s" % test)

            else:
                mem[0x17] = 0
            break

        if mem[0x14] < 0x8:
            mem[0x18] = mem[0x8] >> (0x8 * mem[0x14])
            mem[0x19] = mem[0x12] >> (0x8 * mem[0x14])

        if mem[0x14] > 0x7:
            mem[0x18] = mem[0x9] >> (0x8 * (mem[0x14] - 8))
            mem[0x19] = mem[0x13] >> (0x8 * (mem[0x14] - 8))

        mem[0x18] &= 0xff
        mem[0x19] &= 0xff

        mem[0x1e] = ((mem[0x1c] * mem[0x1e]) + mem[0x1d]) % mem[0x1b]
        mem[0x1a] = mem[0x1e]
        mem[0x1a] = mem[0x1e] >> (0x8 * (mem[0x14] % 0x4))
        mem[0x1f] = mem[0x1a] & 0xff
        mem[0x20] = mem[0x18] ^ mem[0x1f]
        #print(chr(mem[0x1f] ^ mem[0x19]))

        if mem[0x20] != mem[0x19]:
            print("fail")
            mem[0x15] = 0
        
        if mem[0x20] == mem[0x19]:
            mem[0x16] += 1
        
        mem[0x14] += 1
        if mem[0x14] > 0xF:
            mem[0x15] = 0

def VM3():
    mem = [0 for x in range(0,256)]
    
    mem[0] = 0x1100
    mem[1] = 0x3322
    mem[2] = 0x5544
    mem[3] = 0x7766
    mem[4] = 0x9988
    mem[5] = 0xBBAA
    mem[6] = 0xDDCC
    mem[7] = 0xFFEE

    mem[8] = mem[3] << 0x30 | mem[2] << 0x20 | mem[1] << 0x10 | mem[0]
    mem[9] = mem[7] << 0x30 | mem[6] << 0x20 | mem[5] << 0x10 | mem[4]
    mem[0x1e] = 0xffff
    mem[0x1d] = mem[0x1e]
    mem[0x1e] = mem[0x1e] << 0x10 | mem[0x1d]
    mem[0x1b] = 0
    mem[0x1f] = 0
    mem[0x20] = 0
    mem[0x13] = 0x1505

    while(1):
        if mem[0x1b] >= 4:
            break
        mem[0x1c] = mem[0x8] >> (0x8 * mem[0x1b])
        mem[0x1c] &= 0xff
        mem[0x1d] = mem[0x13]
        mem[0x13] = ((mem[0x13] << 0x5) + mem[0x1d]) + mem[0x1c]
        mem[0x1b] += 1

    mem[0x13] = mem[0x13] & mem[0x1e]
    mem[0x14] = (0x7c8d << 0x10) | 0xf4cb

    if mem[0x14] == mem[0x13]:
        mem[0x1f] += 1
    
    if mem[0x1f] > 0:
        mem[0x15] = 0
        while(1):
            if mem[0x1b] >= 0x8:
                break
            mem[0x1c] = mem[0x8] << (0x8 * mem[0x1b])
            mem[0x1c] &= 0xff
            mem[0x15] = ROR32(mem[0x15], 0xd)
            mem[0x15] = mem[0x15] + mem[0x1c]
            mem[0x1b] += 1

        mem[0x15] = mem[0x15] & 0x1e
        mem[0x16] = (0x8b68 << 0x10) | 0x1d82
        if mem[0x15] == mem[0x16]:
            mem[0x1f] += 1

    if mem[0x1f] > 1:
        mem[0x11] = 1
        mem[0x12] = 0
        mem[0x17] = 0
        mem[0x1b] = 0
        while(1):
            if mem[0x1b] >= 0x8:
                break
            mem[0x1c] = mem[0x9] >> (0x8 * mem[0x1b])
            mem[0x1c] &= 0xff
            mem[0x11] = (mem[0x11] + mem[0x1c]) % 0xfff1
            mem[0x12] = (mem[0x12] + mem[0x11]) % 0xfff1
            mem[0x1b] += 1

        mem[0x17] = (mem[0x12] < 0x10) | mem[0x11] #0x259
        mem[0x17] = mem[0x17] & mem[0x1e]
        mem[0x18] = (0xf91 << 0x10) | 0x374
        if mem[0x18] == mem[0x17]:
            mem[0x1f] += 1

    if mem[0x1f] > 2:
        mem[0xa] = 0x193
        mem[0xb] = 0x100
        mem[0xc] = (mem[0xb] << 0x10) | mem[0xa]
        mem[0xd] = 0x9dc5
        mem[0xe] = 0x811c
        mem[0xf] = (mem[0xe] << 0x10) | mem[0xd]
        mem[0x10] = 0x1 << 0x20
        mem[0x19] = mem[0xf]
        mem[0x1b] = 0x0

        while(1):
            if mem[0x1b] >= 0x10:
                break
            if mem[0x1b] < 0x8:
                mem[0x1c] = mem[0x8] >> (0x8 * mem[0x1b])
            if mem[0x1b] > 0x7:
                mem[0x1c] = mem[0x9] >> (0x8 * mem[0x1b])
            mem[0x1c] &= 0xff
            mem[0x19] = (mem[0x19] * mem[0xc]) & mem[0x10]
            mem[0x19] = mem[0x19] ^ mem[0x1c]
            mem[0x1b] += 1
        mem[0x19] = mem[0x19] & mem[0x1e]
        mem[0x1a] = (0x31f0 << 0x10) | 0x9d2
        if mem[0x1a] == mem[0x19]:
            mem[0x1f] += 1

    if mem[0x1f] == 4:
        mem[0x20] = 1

    return mem[0x20]